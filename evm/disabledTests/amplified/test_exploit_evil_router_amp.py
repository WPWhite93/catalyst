import brownie
import numpy as np
import pytest
from brownie import Token
from brownie.test import given, strategy
from hypothesis import settings
from utils.swap_utils import payloadConstructor, LiquidityPayloadConstructor

@pytest.fixture(autouse=True)
def isolation(module_isolation):
    pass




depositValues = [10 * 10**18, 10 * 10**18]


def test_expliot_by_amp_swap(
    accounts,
    crosschaininterface,
    ibcemulator,
    token1,
    token2,
    deploy_swappool,
    fn_isolation,
):
    swappool = deploy_swappool(
        [token1, token2],
        depositValues,
        2**63,
        "PS OneTwoThree",
        "ps(OTT)",
        deployer=accounts[0],
    )

    amp = swappool._amp() / 2**64
    max_num_units = int(
        (
            (1 - 2 ** (amp - 1))
            * (
                (token1.balanceOf(swappool) ** (1 - amp))
                + (token2.balanceOf(swappool) ** (1 - amp))
            )
            - 1
        )
        * 2**64
        / 2
    )
    # Amplified pools cannot have the whole drain in one token, as their curve intersects with the axies.

    hatter = accounts[3]

    # Token 0

    fake_payload = payloadConstructor(
        swappool.address,
        swappool.address,
        brownie.convert.to_bytes(hatter.address),
        max_num_units,
        0,
    )
    fake_packet = [["", ""], ["", ""], 0, fake_payload, [0, 0]]

    tx = crosschaininterface.onRecvPacket(fake_packet, {"from": ibcemulator})

    assert 1 >= token1.balanceOf(hatter) / token1.balanceOf(swappool) >= 1 * 0.9

    new_max_num_units = int(
        (
            (1 - 2 ** (amp - 1))
            * (
                (token1.balanceOf(swappool) ** (1 - amp))
                + (token2.balanceOf(swappool) ** (1 - amp))
            )
            - 1
        )
        * 2**64
        - max_num_units
    )
    assert 1.01 >= new_max_num_units / swappool.getUnitCapacity() >= 0.99

    new_max_num_units = swappool.getUnitCapacity() - 1
    # Token 1

    fake_payload = payloadConstructor(
        swappool.address,
        swappool.address,
        brownie.convert.to_bytes(hatter.address),
        new_max_num_units,
        1,
    )
    fake_packet = [["", ""], ["", ""], 0, fake_payload, [0, 0]]

    tx = crosschaininterface.onRecvPacket(fake_packet, {"from": ibcemulator})

    assert 0.6 >= token2.balanceOf(hatter) / token2.balanceOf(swappool) >= 0.6 * 0.9


def test_expliot_too_greedy_by_swap(
    accounts,
    crosschaininterface,
    ibcemulator,
    token1,
    token2,
    deploy_swappool,
    fn_isolation,
):
    swappool = deploy_swappool(
        [token1, token2],
        depositValues,
        2**63,
        "PS OneTwoThree",
        "ps(OTT)",
        deployer=accounts[0],
    )

    amp = swappool._amp() / 2**64
    max_num_units = int(
        (
            (1 - 2 ** (amp - 1))
            * (
                (token1.balanceOf(swappool) ** (1 - amp))
                + (token2.balanceOf(swappool) ** (1 - amp))
            )
            + 2
        )
        * 2**64
    )

    hatter = accounts[3]

    fake_payload = payloadConstructor(
        swappool.address,
        swappool.address,
        brownie.convert.to_bytes(hatter.address),
        max_num_units,
        1,
    )
    fake_packet = [["", ""], ["", ""], 0, fake_payload, [0, 0]]

    with brownie.reverts():
        tx = crosschaininterface.onRecvPacket(fake_packet, {"from": ibcemulator})

    tkn = Token.at(swappool._tokenIndexing(1))
    assert tkn.balanceOf(hatter) == 0


# TODO Fix.
# def test_expliot_by_liquidity_swap(
#     accounts,
#     crosschaininterface,
#     ibcemulator,
#     token1,
#     token2,
#     deploy_swappool,
#     fn_isolation,
# ):
#     swappool = deploy_swappool(
#         [token1, token2],
#         depositValues,
#         2**63,
#         "PS OneTwoThree",
#         "ps(OTT)",
#         deployer=accounts[0],
#     )

#     amp = swappool._amp() / 2**64
#     max_num_units = int(
#         (3 ** (1 - amp) * 2 ** (1 * amp - 1) - 1)
#         * (
#             1 * swappool._balance0(token1) ** (1 - amp)
#             + 1 * swappool._balance0(token2) ** (1 - amp)
#         )
#         * 2**64
#     )

#     initialSupply = swappool.totalSupply()

#     hatter = accounts[3]

#     fake_payload = LiquidityPayloadConstructor(
#         swappool.address,
#         swappool.address,
#         brownie.convert.to_bytes(hatter.address),
#         max_num_units,
#         1,
#     )
#     fake_packet = [["", ""], ["", ""], 0, fake_payload, [0, 0]]

#     tx = crosschaininterface.onRecvPacket(fake_packet, {"from": ibcemulator})

#     assert 1 / 2 > swappool.balanceOf(hatter) / initialSupply > 1 / 2 * 0.9

#     swappool.withdrawAll(swappool.balanceOf(hatter), {"from": hatter})

#     assert swappool.totalSupply() == initialSupply
#     assert 1 / 2 > token1.balanceOf(hatter) / token1.balanceOf(swappool) > 1 / 2 * 0.9
#     assert 1 / 2 > token2.balanceOf(hatter) / token2.balanceOf(swappool) > 1 / 2 * 0.9


# def test_expliot_too_greedy_by_liquidity_swap(
#     accounts,
#     crosschaininterface,
#     ibcemulator,
#     token1,
#     token2,
#     deploy_swappool,
#     fn_isolation,
# ):
#     swappool = deploy_swappool(
#         [token1, token2],
#         depositValues,
#         2**63,
#         "PS OneTwoThree",
#         "ps(OTT)",
#         deployer=accounts[0],
#     )

#     amp = swappool._amp() / 2**64
#     max_num_units = int(
#         (3 ** (1 - amp) * 2 ** (1 * amp - 1) - 1)
#         * (
#             1 * swappool._balance0(token1) ** (1 - amp)
#             + 1 * swappool._balance0(token2) ** (1 - amp)
#         )
#         * 2**64 * 1.01
#     )
#     initialSupply = swappool.totalSupply()

#     hatter = accounts[3]

#     fake_payload = payloadConstructor(
#         swappool.address,
#         swappool.address,
#         brownie.convert.to_bytes(hatter.address),
#         max_num_units,
#         1,
#         _context=brownie.convert.to_bytes(1, type_str="bytes1"),
#     )
#     fake_packet = [["", ""], ["", ""], 0, fake_payload, [0, 0]]

#     with brownie.reverts():
#         tx = crosschaininterface.onRecvPacket(fake_packet, {"from": ibcemulator})
