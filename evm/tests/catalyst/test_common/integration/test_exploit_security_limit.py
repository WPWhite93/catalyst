import pytest
from brownie import convert, reverts, chain

from tests.catalyst.utils.pool_utils import encode_swap_payload


pytestmark = pytest.mark.usefixtures("group_finish_setup", "group_connect_pools")

@pytest.mark.no_call_coverage
def test_exploit_security_limit_with_timeout(
    channel_id,
    pool_1,
    pool_2,
    pool_1_tokens,
    ibc_emulator,
    cross_chain_interface,
    deployer,
    elwood
):
    """
        From the bridge/router perspective: attempt to bypass the security limit by using a timed-out swap:
            1. Extract from the pool as many assets as possible (security limit will allow 1/2 the pool value)
            2. Using those assets, trigger an outgoing swap from the pool that is being attacked to some other pool. In
               general terms, this will cause the unit capacity of the pool to increase.
                => The bridge will have the power to timeout the swap and recover the assets sent
            3. Try to extract more
                => If the unit capacity increase gets updated BEFORE a swap ack is received this exploit will succeed
                => Otherwise, the bridge will be unable of extracting any more assets
    """

    # First, extract half of pool 1 (reach security limit)
    # NOTE: do so across all the tokens contained by the pool, otherwise, for amplified pools,
    # the pool may run out of assets before the security limit is reached
    
    # Extract approximately the same value of each asset. The unit_capacity left is computed on each loop, 
    # as for amplified pools it is dependent on the asset balances (and here assets are being withdrawn on each iteration)
    # For a pool with 3 assets, this loop will extract 1) U = unit_capacity * 1/3, 2) unit_capacity * 1/2, 3) unit_capacity * 1/1
    for i, token in enumerate(pool_1_tokens):
        # The 'elwood' account will be the one trying to steal the funds
        assert token.balanceOf(elwood) == 0

        chain.mine()    # Make sure the unit_capacity reading is as accurate as possible (as it is time dependent)
        unit_capacity = pool_1.getUnitCapacity()

        fake_payload = encode_swap_payload(
            pool_2.address,     # Fake swap coming from pool 2 (doesn't really matter, it only must be a 'connected' pool)
            pool_1.address,
            convert.to_bytes(elwood.address),
            int(unit_capacity * 1/(len(pool_1_tokens)-i) * 0.9999) - 1,   #TODO *0.9999 is required, as otherwise amplified pools sometimes fail with a security limit excess error. This shouldn't happen!
            i,
        )
        fake_packet = [["", channel_id], ["", ""], 0, fake_payload, [0, 0]]     #TODO add helper to build packet
        cross_chain_interface.onRecvPacket(fake_packet, {"from": ibc_emulator})

    # At this point 'elwood' has extracted 1/2 of the pool.
    # NOTE: the stolen funds amount don't necessarily equal the funds left in the pool, as there can be more than
    # one token hold by the pool, and the tokens are not retrieved symmetrically.

    assert pool_1.getUnitCapacity() <= int(0.0001 * pool_1._max_unit_inflow())   # Check the unit capacity is 0 (allow for a small error due to calculation errors)

    # From this point onwards, use only one token to continue with the extraction of funds from the pool. There is no further
    # risk of emptying an amplified pool of assets (as no more assets should be allowed to be stolen). In any case,
    # if the amplified pool were to be emptied (e.g. by the following swap), the test would fail and hence become invalid.

    target_token_index = 0
    target_token = pool_1_tokens[target_token_index]
    inital_stolen_funds_balance = target_token.balanceOf(elwood)

    # Try to extract more (should fail, as the limit has been reached)
    with reverts():
        fake_payload = encode_swap_payload(
            pool_2.address,
            pool_1.address,
            convert.to_bytes(elwood.address),
            int(0.001 * 10e18),    # Even a very small value of units should fail
            target_token_index,
        )
        fake_packet = [["", channel_id], ["", ""], 0, fake_payload, [0, 0]]

        cross_chain_interface.onRecvPacket(fake_packet, {"from": ibc_emulator})

    # Send a cross chain swap with the stolen funds to increase the pool unit capacity (knowing that it will fail)
    target_token.approve(pool_1, inital_stolen_funds_balance, {"from": elwood})
    tx_swap_to_units = pool_1.swapToUnits(
        channel_id,
        convert.to_bytes(pool_2.address),   # NOTE: target pool doesn't matter
        convert.to_bytes(deployer.address),
        target_token,
        0,                                  # NOTE: target asset index doesn't matter
        inital_stolen_funds_balance,
        0,
        elwood,
        {"from": elwood},
    )

    # Extract more
    max_units = pool_1.getUnitCapacity() - 1

    fake_payload = encode_swap_payload(
        pool_2.address,
        pool_1.address,
        convert.to_bytes(elwood.address),
        max_units,
        0,
    )
    fake_packet = [["", channel_id], ["", ""], 0, fake_payload, [0, 0]]
    cross_chain_interface.onRecvPacket(fake_packet, {"from": ibc_emulator})


    # Time out the swap to recover the initially stolen assets
    ibc_emulator.timeout(
        tx_swap_to_units.events["IncomingMetadata"]["metadata"][0],
        tx_swap_to_units.events["IncomingPacket"]["packet"],
        {"from": deployer},
    )

    # If the balance of 'elwood' exceeds the initial stolen balance it means the security limit was exploited.
    # NOTE: Allow for a small extra margin due to the security limit decay
    assert target_token.balanceOf(elwood) < int(1.01 * inital_stolen_funds_balance), "Pool was exploited"
